#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#define WORKGROUP_SIZE 64
#define MAX_SNOWFLAKES 20000
#define SNOW_X_MIN -10
#define SNOW_X_MAX 10
#define SNOW_Y_MIN -10
#define SNOW_Y_MAX 5
#define SNOW_Z_MIN -10
#define SNOW_Z_MAX 10

#define SNOW_FALL_VELOCITY 0.15
#define SNOW_RANDOM_MOVES 0.005
#define SNOW_RANDOM_ROTATIONS 5.0

#define K1 vec2(23.14069263277926, 2.665144142690225)

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (push_constant) uniform Constants {
    uint frameNo;
    float lastFrameTimeSecs;
} constants;

struct Snowflake {
    vec3 pos;
    vec3 rot;
};

struct SnowflakeVelocity {
    vec3 posVel;
    vec3 rotVel;
};

struct SnowflakeAcceleration {
    vec3 posAcc;
    vec3 rotAcc;
};

struct Color {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct InstanceData {
    mat4 model;
    Color color;
};

layout(std430, set = 0, binding = 0) buffer snowflakePositionsBuf {
    Snowflake sf[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 1) buffer snowflakeVelocitiesBuf {
    SnowflakeVelocity sfVel[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 2) buffer snowflakeAccelerationsBuf {
    SnowflakeAcceleration sfAcc[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 3) buffer instancesBuf {
    InstanceData instances[MAX_SNOWFLAKES];
};

uint rng_state;

uint rand_lcg() {
    rng_state = 1664525 * rng_state + 1013904223;
    return rng_state;
}

uint squares(uint64_t ctr) {

    uint64_t key = (0x63acbfe2U << 32) | 0x13f5d867U;
    uint64_t x, y, z;

    y = x = ctr * key; z = y + key;
    x = x*x + y; x = (x>>32) | (x<<32);       /* round 1 */
    x = x*x + z; x = (x>>32) | (x<<32);       /* round 2 */
    x = x*x + y; x = (x>>32) | (x<<32);       /* round 3 */
    return uint((x*x + z) >> 32);         /* round 4 */
}

float randomFromRange(float min, float max) {
//    float rnd = fract(float(rand_lcg()) * (1.0 / 4294967295.0));   // [0; 1)
    float rnd = fract(float(squares(constants.frameNo << 8 | gl_GlobalInvocationID.x)) * (1.0 / 4294967295.0));   // [0; 1)
    return rnd * (max - min) + min;
}

void moveSnowflake() {
    uint i = gl_GlobalInvocationID.x;

    sfAcc[i].posAcc.x += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    sfAcc[i].posAcc.y += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    sfAcc[i].posAcc.z += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);

    sfVel[i].posVel.x += constants.lastFrameTimeSecs * sfAcc[i].posAcc.x;
    sfVel[i].posVel.y += constants.lastFrameTimeSecs * sfAcc[i].posAcc.y;
    sfVel[i].posVel.z += constants.lastFrameTimeSecs * sfAcc[i].posAcc.z;

    sf[i].pos.x += constants.lastFrameTimeSecs * sfVel[i].posVel.x;
    sf[i].pos.y += constants.lastFrameTimeSecs * sfVel[i].posVel.y + constants.lastFrameTimeSecs * SNOW_FALL_VELOCITY;
    sf[i].pos.z += constants.lastFrameTimeSecs * sfVel[i].posVel.z;

    if (sf[i].pos.y > SNOW_Y_MAX) {
        sf[i].pos.x = randomFromRange(SNOW_X_MIN, SNOW_X_MAX);
        sf[i].pos.y -= (SNOW_Y_MAX - SNOW_Y_MIN);
        sf[i].pos.z = randomFromRange(SNOW_Z_MIN, SNOW_Z_MAX);
    }

    sf[i].rot.x += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
    sf[i].rot.y += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
    sf[i].rot.z += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
}

void recalculateInstance() {
    uint i = gl_GlobalInvocationID.x;
    float alpha = sf[i].rot.x;
    float beta = sf[i].rot.y;
    float gamma = sf[i].rot.z;

    instances[i].model[0].x = cos(beta) * cos(gamma);
    instances[i].model[0].y = cos(beta) * sin(gamma);
    instances[i].model[0].z = -sin(beta);

    instances[i].model[1].x = sin(alpha) * sin(beta) * cos(gamma) - cos(alpha) * sin(gamma);
    instances[i].model[1].y = sin(alpha) * sin(beta) * sin(gamma) + cos(alpha) * cos(gamma);
    instances[i].model[1].z = sin(alpha) * cos(beta);

    instances[i].model[2].x = cos(alpha) * sin(beta) * cos(gamma) + sin(alpha) * sin(gamma);
    instances[i].model[2].y = cos(alpha) * sin(beta) * sin(gamma) - sin(alpha) * cos(gamma);
    instances[i].model[2].z = cos(alpha) * cos(beta);

    instances[i].model[3].x = sf[i].pos.x;
    instances[i].model[3].y = sf[i].pos.y;
    instances[i].model[3].z = sf[i].pos.z;
}

void main() {
    if (gl_GlobalInvocationID.x >= MAX_SNOWFLAKES) {
        return;
    }

    rng_state = gl_GlobalInvocationID.x + floatBitsToUint(constants.lastFrameTimeSecs);

    moveSnowflake();
    recalculateInstance();
}
