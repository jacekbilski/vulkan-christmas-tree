#version 450
#define WORKGROUP_SIZE 64
#define MAX_SNOWFLAKES 20000
#define SNOW_X_MIN -10
#define SNOW_X_MAX 10
#define SNOW_Y_MIN -10
#define SNOW_Y_MAX 5
#define SNOW_Z_MIN -10
#define SNOW_Z_MAX 10

#define SNOW_FALL_VELOCITY 0.15
#define SNOW_RANDOM_MOVES 0.005
#define SNOW_RANDOM_ROTATIONS 5.0

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (push_constant) uniform Constants {
    float lastFrameTimeSecs;
} constants;

struct Snowflake {
    vec3 position;
    vec3 rotation;
};

struct Color {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct InstanceData {
    mat4 model;
    Color color;
};

layout(std430, set = 0, binding = 0) buffer snowflakePositionsBuf {
    Snowflake snowflakes[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 1) buffer snowflakeVelocitiesBuf {
    Snowflake snowflakeX[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 2) buffer snowflakeAccelerationsBuf {
    Snowflake snowflakeY[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 3) buffer instancesBuf {
    InstanceData instances[MAX_SNOWFLAKES];
};

uint rng_state;

uint rand_lcg() {
    rng_state = 1664525 * rng_state + 1013904223;
    return rng_state;
}

float randomFromRange(float min, float max) {
    float rnd = fract(float(rand_lcg()) * (1.0 / 4294967295.0));   // [0; 1)
    return rnd * (max - min) + min;
}

void moveSnowflake() {
    uint i = gl_GlobalInvocationID.x;

    snowflakes[i].position.x += randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    snowflakes[i].position.y += constants.lastFrameTimeSecs * SNOW_FALL_VELOCITY + randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    snowflakes[i].position.z += randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    if (snowflakes[i].position.y > SNOW_Y_MAX) {
        snowflakes[i].position.x = randomFromRange(SNOW_X_MIN, SNOW_X_MAX);
        snowflakes[i].position.y -= (SNOW_Y_MAX - SNOW_Y_MIN);
        snowflakes[i].position.z = randomFromRange(SNOW_Z_MIN, SNOW_Z_MAX);
    }

    snowflakes[i].rotation.x += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
    snowflakes[i].rotation.y += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
    snowflakes[i].rotation.z += constants.lastFrameTimeSecs * randomFromRange(-SNOW_RANDOM_ROTATIONS, SNOW_RANDOM_ROTATIONS);
}

void recalculateInstance() {
    uint i = gl_GlobalInvocationID.x;
    float alpha = snowflakes[i].rotation.x;
    float beta = snowflakes[i].rotation.y;
    float gamma = snowflakes[i].rotation.z;

    instances[i].model[0].x = cos(beta) * cos(gamma);
    instances[i].model[0].y = cos(beta) * sin(gamma);
    instances[i].model[0].z = -sin(beta);

    instances[i].model[1].x = sin(alpha) * sin(beta) * cos(gamma) - cos(alpha) * sin(gamma);
    instances[i].model[1].y = sin(alpha) * sin(beta) * sin(gamma) + cos(alpha) * cos(gamma);
    instances[i].model[1].z = sin(alpha) * cos(beta);

    instances[i].model[2].x = cos(alpha) * sin(beta) * cos(gamma) + sin(alpha) * sin(gamma);
    instances[i].model[2].y = cos(alpha) * sin(beta) * sin(gamma) - sin(alpha) * cos(gamma);
    instances[i].model[2].z = cos(alpha) * cos(beta);

    instances[i].model[3].x = snowflakes[i].position.x;
    instances[i].model[3].y = snowflakes[i].position.y;
    instances[i].model[3].z = snowflakes[i].position.z;
}

void main() {
    if (gl_GlobalInvocationID.x >= MAX_SNOWFLAKES) {
        return;
    }

    rng_state = gl_GlobalInvocationID.x + floatBitsToUint(constants.lastFrameTimeSecs);

    moveSnowflake();
    recalculateInstance();
}
