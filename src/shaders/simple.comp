#version 450
#define WORKGROUP_SIZE 64
#define MAX_SNOWFLAKES 5000
#define SNOW_X_MIN -10
#define SNOW_X_MAX 10
#define SNOW_Y_MIN -10
#define SNOW_Y_MAX 5
#define SNOW_Z_MIN -10
#define SNOW_Z_MAX 10

#define SNOW_FALL_VELOCITY 0.15
#define SNOW_RANDOM_MOVES 0.002

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (push_constant) uniform Constants {
    float lastFrameTimeSecs;
} constants;

struct Snowflake {
    vec3 position;
    vec3 rotation;
};

struct Color {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct InstanceData {
    mat4 model;
    Color color;
};

layout(std430, set = 0, binding = 0) buffer snowflakesBuf {
    Snowflake snowflakes[MAX_SNOWFLAKES];
};

layout(std430, set = 0, binding = 1) buffer instancesBuf {
    InstanceData instances[MAX_SNOWFLAKES];
};

uint rng_state;

uint rand_lcg() {
    rng_state = 1664525 * rng_state + 1013904223;
    return rng_state;
}

float randomFromRange(float min, float max) {
    float rnd = fract(float(rand_lcg()) * (1.0 / 4294967295.0));   // [0; 1)
    return rnd * (max - min) + min;
}

void moveSnowflake() {
    uint i = gl_GlobalInvocationID.x;

    snowflakes[i].position.x += randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    snowflakes[i].position.y += constants.lastFrameTimeSecs * SNOW_FALL_VELOCITY + randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    snowflakes[i].position.z += randomFromRange(-SNOW_RANDOM_MOVES, SNOW_RANDOM_MOVES);
    if (snowflakes[i].position.x < SNOW_X_MIN) {
        snowflakes[i].position.x = SNOW_X_MIN;
    }
    if (snowflakes[i].position.x > SNOW_X_MAX) {
        snowflakes[i].position.x = SNOW_X_MAX;
    }
    if (snowflakes[i].position.y > SNOW_Y_MAX) {
        snowflakes[i].position.y -= (SNOW_Y_MAX - SNOW_Y_MIN);
    }
    if (snowflakes[i].position.z < SNOW_Z_MIN) {
        snowflakes[i].position.z = SNOW_Z_MIN;
    }
    if (snowflakes[i].position.z > SNOW_Z_MAX) {
        snowflakes[i].position.z = SNOW_Z_MAX;
    }
}

void recalculateInstance() {
    uint i = gl_GlobalInvocationID.x;

    instances[i].model[3].x = snowflakes[i].position.x;
    instances[i].model[3].y = snowflakes[i].position.y;
    instances[i].model[3].z = snowflakes[i].position.z;
}

void main() {
    if (gl_GlobalInvocationID.x >= MAX_SNOWFLAKES) {
        return;
    }

    rng_state = gl_GlobalInvocationID.x + floatBitsToUint(constants.lastFrameTimeSecs);

    moveSnowflake();
    recalculateInstance();
}
